// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: point_cloud.proto

#ifndef PROTOBUF_point_5fcloud_2eproto__INCLUDED
#define PROTOBUF_point_5fcloud_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_point_5fcloud_2eproto();
void protobuf_AssignDesc_point_5fcloud_2eproto();
void protobuf_ShutdownFile_point_5fcloud_2eproto();

class LidarPointCloud;

// ===================================================================

class LidarPointCloud : public ::google::protobuf::Message {
 public:
  LidarPointCloud();
  virtual ~LidarPointCloud();

  LidarPointCloud(const LidarPointCloud& from);

  inline LidarPointCloud& operator=(const LidarPointCloud& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarPointCloud& default_instance();

  void Swap(LidarPointCloud* other);

  // implements Message ----------------------------------------------

  LidarPointCloud* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LidarPointCloud& from);
  void MergeFrom(const LidarPointCloud& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // optional uint32 seq = 2;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 2;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // optional string frame_id = 3;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 3;
  inline const ::std::string& frame_id() const;
  inline void set_frame_id(const ::std::string& value);
  inline void set_frame_id(const char* value);
  inline void set_frame_id(const char* value, size_t size);
  inline ::std::string* mutable_frame_id();
  inline ::std::string* release_frame_id();
  inline void set_allocated_frame_id(::std::string* frame_id);

  // optional uint32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional bool is_dense = 6;
  inline bool has_is_dense() const;
  inline void clear_is_dense();
  static const int kIsDenseFieldNumber = 6;
  inline bool is_dense() const;
  inline void set_is_dense(bool value);

  // repeated float data = 7;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:proto_msg.LidarPointCloud)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_is_dense();
  inline void clear_has_is_dense();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double timestamp_;
  ::std::string* frame_id_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  bool is_dense_;
  ::google::protobuf::RepeatedField< float > data_;
  friend void  protobuf_AddDesc_point_5fcloud_2eproto();
  friend void protobuf_AssignDesc_point_5fcloud_2eproto();
  friend void protobuf_ShutdownFile_point_5fcloud_2eproto();

  void InitAsDefaultInstance();
  static LidarPointCloud* default_instance_;
};
// ===================================================================


// ===================================================================

// LidarPointCloud

// optional double timestamp = 1;
inline bool LidarPointCloud::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarPointCloud::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarPointCloud::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarPointCloud::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double LidarPointCloud::timestamp() const {
  // @@protoc_insertion_point(field_get:proto_msg.LidarPointCloud.timestamp)
  return timestamp_;
}
inline void LidarPointCloud::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LidarPointCloud.timestamp)
}

// optional uint32 seq = 2;
inline bool LidarPointCloud::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarPointCloud::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarPointCloud::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarPointCloud::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 LidarPointCloud::seq() const {
  // @@protoc_insertion_point(field_get:proto_msg.LidarPointCloud.seq)
  return seq_;
}
inline void LidarPointCloud::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LidarPointCloud.seq)
}

// optional string frame_id = 3;
inline bool LidarPointCloud::has_frame_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LidarPointCloud::set_has_frame_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LidarPointCloud::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LidarPointCloud::clear_frame_id() {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_->clear();
  }
  clear_has_frame_id();
}
inline const ::std::string& LidarPointCloud::frame_id() const {
  // @@protoc_insertion_point(field_get:proto_msg.LidarPointCloud.frame_id)
  return *frame_id_;
}
inline void LidarPointCloud::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set:proto_msg.LidarPointCloud.frame_id)
}
inline void LidarPointCloud::set_frame_id(const char* value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_msg.LidarPointCloud.frame_id)
}
inline void LidarPointCloud::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_msg.LidarPointCloud.frame_id)
}
inline ::std::string* LidarPointCloud::mutable_frame_id() {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto_msg.LidarPointCloud.frame_id)
  return frame_id_;
}
inline ::std::string* LidarPointCloud::release_frame_id() {
  clear_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frame_id_;
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LidarPointCloud::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (frame_id) {
    set_has_frame_id();
    frame_id_ = frame_id;
  } else {
    clear_has_frame_id();
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto_msg.LidarPointCloud.frame_id)
}

// optional uint32 height = 4;
inline bool LidarPointCloud::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LidarPointCloud::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LidarPointCloud::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LidarPointCloud::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 LidarPointCloud::height() const {
  // @@protoc_insertion_point(field_get:proto_msg.LidarPointCloud.height)
  return height_;
}
inline void LidarPointCloud::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LidarPointCloud.height)
}

// optional uint32 width = 5;
inline bool LidarPointCloud::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LidarPointCloud::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LidarPointCloud::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LidarPointCloud::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 LidarPointCloud::width() const {
  // @@protoc_insertion_point(field_get:proto_msg.LidarPointCloud.width)
  return width_;
}
inline void LidarPointCloud::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LidarPointCloud.width)
}

// optional bool is_dense = 6;
inline bool LidarPointCloud::has_is_dense() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LidarPointCloud::set_has_is_dense() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LidarPointCloud::clear_has_is_dense() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LidarPointCloud::clear_is_dense() {
  is_dense_ = false;
  clear_has_is_dense();
}
inline bool LidarPointCloud::is_dense() const {
  // @@protoc_insertion_point(field_get:proto_msg.LidarPointCloud.is_dense)
  return is_dense_;
}
inline void LidarPointCloud::set_is_dense(bool value) {
  set_has_is_dense();
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LidarPointCloud.is_dense)
}

// repeated float data = 7;
inline int LidarPointCloud::data_size() const {
  return data_.size();
}
inline void LidarPointCloud::clear_data() {
  data_.Clear();
}
inline float LidarPointCloud::data(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.LidarPointCloud.data)
  return data_.Get(index);
}
inline void LidarPointCloud::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.LidarPointCloud.data)
}
inline void LidarPointCloud::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.LidarPointCloud.data)
}
inline const ::google::protobuf::RepeatedField< float >&
LidarPointCloud::data() const {
  // @@protoc_insertion_point(field_list:proto_msg.LidarPointCloud.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
LidarPointCloud::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.LidarPointCloud.data)
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_point_5fcloud_2eproto__INCLUDED
